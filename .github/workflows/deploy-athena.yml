name: Deploy Athena CDK

on:
  workflow_dispatch:
    inputs:
      tenant:
        description: "Tenant name (must exist in config.yaml)"
        required: true
        type: string
      env:
        description: "Environment (e.g., dev, prod)"
        required: true
        type: string

jobs:
  deploy-athena:
    runs-on: ubuntu-latest
    env:
      WORKING_DIR: athena
      PYTHON_VERSION: 3.11

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      # ✅ Validate tenant/env exist in config.yaml
      - name: Validate config.yaml
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          python - <<EOF
          import yaml, sys
          tenant = "${{ github.event.inputs.tenant }}"
          env = "${{ github.event.inputs.env }}"
          with open("config.yaml") as f:
              config = yaml.safe_load(f)
          if tenant not in config:
              sys.exit(f"❌ Tenant '{tenant}' not found in config.yaml")
          if env not in config[tenant]:
              sys.exit(f"❌ Env '{env}' not found under tenant '{tenant}' in config.yaml")
          print(f"✅ Tenant '{tenant}', Env '{env}' validated in config.yaml")
          EOF

      # 🔎 Detect CDK version from requirements.txt
      - name: Detect CDK version
        id: detect_cdk
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          VERSION=$(grep -E '^aws-cdk-lib' requirements.txt | cut -d'=' -f3)
          echo "Detected aws-cdk-lib version: $VERSION"
          echo "cdk_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Install CDK CLI
        run: npm install -g aws-cdk@${{ steps.detect_cdk.outputs.cdk_version }}

      # ✅ Pre-checks
      - name: CDK Synth
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          cdk synth \
          -c tenant=${{ github.event.inputs.tenant }} \
          -c env=${{ github.event.inputs.env }}

      - name: CDK Diff
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          cdk diff \
          -c tenant=${{ github.event.inputs.tenant }} \
          -c env=${{ github.event.inputs.env }}

      # 🚀 Deploy
      - name: Deploy CDK Stack
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          cdk deploy \
          -c tenant=${{ github.event.inputs.tenant }} \
          -c env=${{ github.event.inputs.env }} \
          --require-approval never
